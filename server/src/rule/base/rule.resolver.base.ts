/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateRuleArgs } from "./CreateRuleArgs";
import { UpdateRuleArgs } from "./UpdateRuleArgs";
import { DeleteRuleArgs } from "./DeleteRuleArgs";
import { RuleFindManyArgs } from "./RuleFindManyArgs";
import { RuleFindUniqueArgs } from "./RuleFindUniqueArgs";
import { Rule } from "./Rule";
import { RuleService } from "../rule.service";

@graphql.Resolver(() => Rule)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class RuleResolverBase {
  constructor(
    protected readonly service: RuleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Rule",
    action: "read",
    possession: "any",
  })
  async _rulesMeta(
    @graphql.Args() args: RuleFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Rule])
  @nestAccessControl.UseRoles({
    resource: "Rule",
    action: "read",
    possession: "any",
  })
  async rules(@graphql.Args() args: RuleFindManyArgs): Promise<Rule[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Rule, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Rule",
    action: "read",
    possession: "own",
  })
  async rule(@graphql.Args() args: RuleFindUniqueArgs): Promise<Rule | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Rule)
  @nestAccessControl.UseRoles({
    resource: "Rule",
    action: "create",
    possession: "any",
  })
  async createRule(@graphql.Args() args: CreateRuleArgs): Promise<Rule> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Rule)
  @nestAccessControl.UseRoles({
    resource: "Rule",
    action: "update",
    possession: "any",
  })
  async updateRule(@graphql.Args() args: UpdateRuleArgs): Promise<Rule | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Rule)
  @nestAccessControl.UseRoles({
    resource: "Rule",
    action: "delete",
    possession: "any",
  })
  async deleteRule(@graphql.Args() args: DeleteRuleArgs): Promise<Rule | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
